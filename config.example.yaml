# MediaScanner Configuration

# General settings
log_level: "info"  # Deprecated: use logger.level instead
scan_interval: 5  # in minutes

# Logger settings
logger:
  level: "info"  # debug, info, warn, error, fatal
  format: "json"  # json, console
  output: "stdout"  # stdout, stderr, file
  file: "logs/mediascanner.log"  # only used if output is "file"
  max_size: 100  # maximum size in megabytes before rotation
  max_backups: 3  # maximum number of old log files to retain
  max_age: 28  # maximum number of days to retain old log files
  compress: true  # compress rotated log files

# LLM settings
llm:
  provider: "openai"
  api_key: "your-openai-api-key"
  base_url: "https://api.openai.com/v1"
  model: "gpt-3.5-turbo"
  # Custom system prompt for single file processing
  system_prompt: |
    You are a media file analyzer that helps identify movies and TV shows from filenames.
    Your task is to analyze the given filename and determine:
    1. The correct title of the media
    2. Whether it's a movie or TV show
    3. For TV shows, identify the season and episode numbers
    4. The year of release (if available)
    5. The appropriate category for the media based on the provided directory structure

    You should use the searchTMDB, searchTVDB, and searchBangumi functions to get accurate information.
    For anime content, prioritize using searchBangumi after confirming it's anime through TMDB/TVDB.

    Respond with a structured JSON containing the media information and the appropriate destination path.

  # Custom system prompt for batch processing
  batch_system_prompt: |
    You are a media file analyzer that helps identify movies and TV shows from filenames.
    Your task is to analyze the given filenames and determine for each file:
    1. The correct title of the media
    2. Whether it's a movie or TV show
    3. For TV shows, identify the season and episode numbers
    4. The year of release (if available)
    5. The appropriate category for the media based on the provided directory structure

    You should use the searchTMDB, searchTVDB, and searchBangumi functions to get accurate information.
    For anime content, prioritize using searchBangumi after confirming it's anime through TMDB/TVDB.

    Respond with a structured JSON array containing the media information and the appropriate destination path for each file.
  max_retries: 3
  timeout: 30  # in seconds

# API settings
apis:
  tmdb:
    api_key: "your-tmdb-api-key"
    language: "zh-CN"
    include_adult: false
  tvdb:
    api_key: "your-tvdb-api-key"
    language: "zh-CN"
  bangumi:
    api_key: "your-bangumi-api-key"
    language: "zh-CN"
    user_agent: "sleepstars/MediaScanner (https://github.com/sleepstars/MediaScanner)"

  # Rate limiting settings
  rate_limiting:
    enabled: true
    tmdb: 5.0        # 5 requests per second for TMDB
    tvdb: 2.0        # 2 requests per second for TVDB
    bangumi: 1.0     # 1 request per second for Bangumi
    tmdb_burst: 10   # Burst of 10 requests for TMDB
    tvdb_burst: 5    # Burst of 5 requests for TVDB
    bangumi_burst: 3 # Burst of 3 requests for Bangumi

  # Cache settings
  cache:
    enabled: true
    search_ttl: 24     # Cache search results for 24 hours
    details_ttl: 168   # Cache details for 7 days (7*24=168 hours)

# Database settings
database:
  type: "postgres"
  host: "localhost"
  port: 5432
  user: "postgres"
  password: "postgres"
  database: "mediascanner"
  ssl_mode: "disable"

# Scanner settings
scanner:
  media_dirs:
    - "/path/to/your/media/library"
  exclude_dirs:
    - "sample"
    - "extras"
    - "featurettes"
  exclude_patterns:
    - "sample"
    - "trailer"
    - "extra"
    - "featurette"
  video_extensions:
    - ".mkv"
    - ".mp4"
    - ".avi"
    - ".ts"
    - ".mov"
    - ".wmv"
  batch_threshold: 50
  scan_interval: 5  # Scan interval in minutes

  # File system monitoring settings
  use_watcher: true  # Use file system events instead of polling
  watcher_settings:
    recursive: true  # Watch subdirectories recursively
    process_delay: 30  # Delay in seconds before processing a new file

# File operations settings
file_ops:
  mode: "copy"  # copy, move, symlink
  destination_root: "/path/to/your/organized/library"
  directory_structure:
    电影:
      - "外语电影"
      - "国语电影"
      - "动画电影"
    电视剧:
      - "综艺"
      - "纪录片"
      - "动画"
      - "国产剧"
      - "欧美剧"
      - "日韩剧"
      - "其他"
  movie_template: "{title} ({year})"
  tv_show_template: "{title} ({year})"
  episode_template: "{title} - S{season:02d}E{episode:02d} - {episode_title}"

# Worker pool settings
worker_pool:
  enabled: true
  worker_count: 4                # Number of workers for processing files
  queue_size: 100                # Size of the task queue
  batch_worker_count: 2          # Number of workers for batch processing
  max_concurrent_llm: 2          # Maximum concurrent LLM requests
  max_concurrent_api: 5          # Maximum concurrent API requests
  max_concurrent_file_op: 3      # Maximum concurrent file operations

# Notification settings
notification:
  enabled: false
  provider: "telegram"
  telegram_token: "your-telegram-bot-token"
  success_channel: "@your_channel"
  error_group: "-1001234567890"
